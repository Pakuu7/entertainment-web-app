var found=document.querySelector(".main__found"),moviesParent=document.querySelector(".main__movies"),foundMovies=document.querySelector(".main__found-movies"),moviesContainer=document.querySelector(".main__movies-container"),searchInput=document.querySelector(".main__search-input"),foundTitlePieces=document.querySelector(".main__found-title-pieces"),foundTitlePlurality=document.querySelector(".main__found-title-plurality"),foundTitleName=document.querySelector(".main__found-title-name");function moviesCreate(n){n.forEach(function(n){var e=document.createElement("div"),i=(e.classList.add("main__movie"),n.category),o="",o="Movie"==i?"dist/img/assets/icon-category-movie.svg":"dist/img/assets/icon-category-tv.svg";e.innerHTML='\n            <div class="main__movies-movie-photo-container">\n                <img src="'.concat(n.thumbnail.regular.small,'" class="main__movies-movie-photo" alt="movies movie">\n            </div>\n            <div class="main__movies-movie-bookmark-container">\n                <img src="dist/img/assets/icon-bookmark-empty.svg" class="main__movies-movie-bookmark">\n            </div>\n            <div class="main__movies-movie-info-container">\n                <p class="main__movies-movie-info-top"><span class="main__movies-movie-year">').concat(n.year,'</span> 路 <span class="main__movies-movie-category-icon"><img src="').concat(o,'" alt="Movie category"> </span><span class="main__movies-movie-category-name">').concat(n.category,'</span> 路 <span class="main__movies-movie-rating">').concat(n.rating,'</span></p>\n                <p class="main__movies-movie-info-bottom"><span class="main__movies-movie-title">').concat(n.title,'</span></p>\n            </div>\n            <div class="main__movies-movies-play-container">\n                <img src="dist/img/assets/icon-play.svg" class="main__movies-movies-icon" alt="Play">\n                <p class="main__movies-movies-text">Play</p>\n            </div>\n        '),"Movie"==i&&moviesContainer.appendChild(e)})}function searchInputQuery(e){searchInput.addEventListener("input",function(n){n=n.target.value.trim();""!==n?(found.classList.remove("not-active"),moviesParent.classList.add("not-active"),searchInputMovies(n,e)):""==n&&(found.classList.add("not-active"),moviesParent.classList.remove("not-active"))})}function searchInputMovies(a,n){var s=0;foundMovies.innerHTML="",foundTitleName.textContent=a,n.forEach(function(n){var e,i,o;n.title.toLowerCase().includes(a.toLowerCase())&&(s++,(e=document.createElement("div")).classList.add("main__found-movie"),o="",o="Movie"==(i=n.category)?"dist/img/assets/icon-category-movie.svg":"dist/img/assets/icon-category-tv.svg",e.innerHTML='\n                <div class="main__found-movie-photo-container">\n                    <img src="'.concat(n.thumbnail.regular.small,'" class="main__found-movie-photo" alt="found movie">\n                </div>\n                    <div class="main__found-movie-bookmark-container">\n                    <img src="dist/img/assets/icon-bookmark-empty.svg" class="main__found-movie-bookmark">\n                </div>\n                <div class="main__found-movie-info-container">\n                    <p class="main__found-movie-info-top"><span class="main__found-movie-year">').concat(n.year,'</span> 路 <span class="main__found-movie-category-icon"><img src="').concat(o,'" alt="Movie category"> </span><span class="main__found-movie-category-name">').concat(n.category,'</span> 路 <span class="main__found-movie-rating">').concat(n.rating,'</span></p>\n                    <p class="main__found-movie-info-bottom"><span class="main__found-movie-title">').concat(n.title,'</span></p>\n                </div>\n                <div class="main__found-movies-play-container">\n                    <img src="dist/img/assets/icon-play.svg" class="main__found-movies-icon" alt="Play">\n                    <p class="main__found-movies-text">Play</p>\n                </div>\n                '),"Movie"==i)&&foundMovies.appendChild(e)}),foundTitlePieces.textContent=s,foundTitlePieces.textContent<=1?foundTitlePlurality.textContent="result":foundTitlePlurality.textContent="results"}fetch("./data.json").then(function(n){return n.json()}).then(function(n){moviesCreate(n),searchInputQuery(n)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vdmllcy5qcyJdLCJuYW1lcyI6WyJmb3VuZCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm1vdmllc1BhcmVudCIsImZvdW5kTW92aWVzIiwibW92aWVzQ29udGFpbmVyIiwic2VhcmNoSW5wdXQiLCJmb3VuZFRpdGxlUGllY2VzIiwiZm9yRWFjaCIsIm1vdmllcyIsImNhcmQiLCJjbGFzc0xpc3QiLCJjcmVhdGVFbGVtZW50IiwiY2F0ZWdvcnlNb3ZpZSIsIm1vdmllIiwiY2F0ZWdvcnlNb3ZpZUltYWdlIiwiaW5uZXJIVE1MIiwiY29uY2F0Iiwic2VhcmNoSW5wdXRNb3ZpZXMiLCJhcHBlbmRDaGlsZCIsImUiLCJxdWVyeSIsInRyaW0iLCJhZGQiLCJyZW1vdmUiLCJzZWFyY2hNb3ZpZXMiLCJ0ZXh0Q29udGVudCIsImZvdW5kVGl0bGVOYW1lIiwiZm91bmRUaXRsZVBsdXJhbGl0eSIsImluY2x1ZGVzIiwidG9Mb3dlckNhc2UiLCJmZXRjaCIsInJlc3BvbnNlIiwianNvbiIsInRoZW4iLCJtb3ZpZXNDcmVhdGUiLCJzZWFyY2hJbnB1dFF1ZXJ5Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxNQUFRQyxTQUFTQyxjQUFjLGNBQWMsRUFDN0NDLGFBQWVGLFNBQVNDLGNBQWMsZUFBZSxFQURyREYsWUFBZ0JDLFNBQUNDLGNBQWMscUJBQWUsRUFDOUNDLGdCQUFlRixTQUFTQyxjQUFjLHlCQUFnQixFQUN0REUsWUFBY0gsU0FBU0MsY0FBYyxxQkFBc0IsRUFDM0RHLGlCQUFrQkosU0FBU0MsY0FBYywyQkFBMEIsRUFDbkVJLG9CQUF1QkosU0FBQUEsY0FBYyw4QkFBc0IsRUFDM0RLLGVBQW1CTixTQUFTQyxjQUFjLHlCQUFBLEVBV2hELFNBQ1FNLGFBQVFDLEdBQWZBLEVBQ09DLFFBQU9ULFNBQUFBLEdBQWIsSUFDSVMsRUFBQ0MsU0FBY0MsY0FBYyxLQUFBLEVBS2pDQyxHQUxBSCxFQUVBQyxVQUFJRSxJQUFhLGFBQVMsRUFHVEMsRUFBYSxVQUM3QkMsRUFBcUIsR0FBckJBLEVBRUFBLFNBQUFBLEVBQ0QsMENBa0IwQix1Q0FoQjFCTCxFQW1CY00sVUFBQSw2RkFBQUMsT0FHYkgsRUFBQSxVQUFBLFFBQUEsTUFBQSxzYUFBQSxFQUFBRyxPQU9vQ0gsRUFBQSxLQUFBLHFFQUFBLEVBQUFHLE9BQUFGLEVBQUEsZ0ZBQUEsRUFBQUUsT0FBQUgsRUFBQSxTQUFBLG9EQUFBLEVBQUFHLE9BQUFILEVBQUEsT0FBQSxnSEFBQSxFQUFBRyxPQUNJSCxFQUFBLE1BQUEsa1NBQUEsRUFPM0MsU0FBQUQsR0FFU0ssZ0JBQXVCQyxZQUFVVCxDQUFBLENBakJ6QyxDQUFDLENBQ0YsQ0FFQSxTQXVCR0EsaUJBQW1CRCxHQXRCckJILFlBd0JNTyxpQkFBZ0JDLFFBQU0sU0FBQU0sR0FDMUJDLEVBQUlOLEVBQUFBLE9BQUFBLE1BQXFCTyxLQUFFLEVBRXZCVCxLQUFKUSxHQXhCQXJCLE1BeUJDZSxVQUFBQSxPQUFrQixZQUFHLEVBeEJ0QlosYUF5Qk9RLFVBQUFZLElBQUEsWUFBQSxFQXhCUEwsa0JBeUJDSCxFQUFrQk4sQ0FBRyxHQUN0QixJQUFBWSxJQXhCQXJCLE1BMEJBVSxVQUFLTSxJQUFTLFlBQUEsRUF6QmRiLGFBMENnQlUsVUFBYVcsT0FBSSxZQUFTLEVBeEM1QyxDQUFDLENBQ0YsQ0FFQSxTQTBDRU4sa0JBQUFHLEVBQUFaLEdBekNELElBMENFZ0IsRUFBQSxFQXpDRnJCLFlBMkNBRyxVQUFpQm1CLEdBMUNqQkMsZUEyQ0lwQixZQUFpQm1CLEVBekNyQmpCLEVBMkNDRCxRQUFNLFNBQUFNLEdBMUNOLElBNkNGSixFQXhDT0csRUFJSEUsRUFrQ0ZhLEVBQUFBLE1BQUFBLFlBQW9CRixFQUFXRyxTQUFHUixFQUFTUyxZQUFBLENBQUEsSUFDNUNMLENBQUEsSUFDRGYsRUFBQVQsU0FBQVcsY0FBQSxLQUFBLEdBMUNRRCxVQUFVWSxJQUFJLG1CQUFtQixFQUdsQ1IsRUFBcUIsR0FHeEJBLEVBRG9CLFVBSGpCRixFQUFnQkMsRUFBZ0IsVUFJZCwwQ0FFQSx1Q0FHdEJKLEVBQUtNLFVBQVMsb0dBQUFDLE9BRWVILEVBQWlCLFVBQVcsUUFBUyxNQUFDLDJiQUFBLEVBQUFHLE9BTTJCSCxFQUFZLEtBQUMsb0VBQUEsRUFBQUcsT0FBcUVGLEVBQWtCLCtFQUFBLEVBQUFFLE9BQWdGSCxFQUFnQixTQUFDLG1EQUFBLEVBQUFHLE9BQW9ESCxFQUFjLE9BQUMsa0hBQUEsRUFBQUcsT0FDcFFILEVBQWEsTUFBQywyVEFBQSxFQVEvRSxTQUFqQkQsSUFDQ1QsWUFBWWUsWUFBWVQsQ0FBSSxDQUsvQyxDQUFDLEVBRURILGlCQUFpQm1CLFlBQWNELEVBQzNCbEIsaUJBQWlCbUIsYUFBZSxFQUNuQ0Usb0JBQW9CRixZQUFjLFNBRWxDRSxvQkFBb0JGLFlBQWMsU0FFcEMsQ0FqSEFLLE1BQU1KLGFBQWMsRUFFcEJJLEtBQU0sU0FBQUMsR0FBQSxPQUFhQSxFQUNaQyxLQUFBLENBQUEsQ0FBQSxFQUFRQyxLQUFBLFNBQUFELEdBQ1JFLGFBQUFGLENBQVEsRUFDUEUsaUJBQWlCRixDQUN2QkcsQ0FDQSxDQUFDIiwiZmlsZSI6Im1vdmllcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmb3VuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluX19mb3VuZCcpXHJcbmNvbnN0IG1vdmllc1BhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluX19tb3ZpZXMnKVxyXG5jb25zdCBmb3VuZE1vdmllcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluX19mb3VuZC1tb3ZpZXMnKVxyXG5jb25zdCBtb3ZpZXNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbl9fbW92aWVzLWNvbnRhaW5lcicpXHJcbmNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW5fX3NlYXJjaC1pbnB1dCcpXHJcbmNvbnN0IGZvdW5kVGl0bGVQaWVjZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbl9fZm91bmQtdGl0bGUtcGllY2VzJylcclxuY29uc3QgZm91bmRUaXRsZVBsdXJhbGl0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluX19mb3VuZC10aXRsZS1wbHVyYWxpdHknKVxyXG5jb25zdCBmb3VuZFRpdGxlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluX19mb3VuZC10aXRsZS1uYW1lJylcclxuXHJcbmZldGNoKCcuL2RhdGEuanNvbicpXHJcblx0LnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG5cdC50aGVuKGpzb24gPT4ge1xyXG4gICAgICAgIG1vdmllc0NyZWF0ZShqc29uKSxcclxuXHRcdHNlYXJjaElucHV0UXVlcnkoanNvbilcclxuXHR9KVxyXG5cclxuZnVuY3Rpb24gbW92aWVzQ3JlYXRlKG1vdmllcykge1xyXG5cdG1vdmllcy5mb3JFYWNoKG1vdmllID0+IHtcclxuXHRcdGNvbnN0IGNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG5cdFx0Y2FyZC5jbGFzc0xpc3QuYWRkKCdtYWluX19tb3ZpZScpXHJcblxyXG5cdFx0bGV0IGNhdGVnb3J5TW92aWUgPSBtb3ZpZVsnY2F0ZWdvcnknXVxyXG5cdFx0bGV0IGNhdGVnb3J5TW92aWVJbWFnZSA9ICcnXHJcblxyXG5cdFx0aWYgKGNhdGVnb3J5TW92aWUgPT0gJ01vdmllJykge1xyXG5cdFx0XHRjYXRlZ29yeU1vdmllSW1hZ2UgPSAnZGlzdC9pbWcvYXNzZXRzL2ljb24tY2F0ZWdvcnktbW92aWUuc3ZnJ1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2F0ZWdvcnlNb3ZpZUltYWdlID0gJ2Rpc3QvaW1nL2Fzc2V0cy9pY29uLWNhdGVnb3J5LXR2LnN2ZydcclxuXHRcdH1cclxuXHJcblx0XHRjYXJkLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1haW5fX21vdmllcy1tb3ZpZS1waG90by1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHttb3ZpZVsndGh1bWJuYWlsJ11bJ3JlZ3VsYXInXVsnc21hbGwnXX1cIiBjbGFzcz1cIm1haW5fX21vdmllcy1tb3ZpZS1waG90b1wiIGFsdD1cIm1vdmllcyBtb3ZpZVwiPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1haW5fX21vdmllcy1tb3ZpZS1ib29rbWFyay1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiZGlzdC9pbWcvYXNzZXRzL2ljb24tYm9va21hcmstZW1wdHkuc3ZnXCIgY2xhc3M9XCJtYWluX19tb3ZpZXMtbW92aWUtYm9va21hcmtcIj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYWluX19tb3ZpZXMtbW92aWUtaW5mby1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwibWFpbl9fbW92aWVzLW1vdmllLWluZm8tdG9wXCI+PHNwYW4gY2xhc3M9XCJtYWluX19tb3ZpZXMtbW92aWUteWVhclwiPiR7bW92aWVbJ3llYXInXX08L3NwYW4+IMK3IDxzcGFuIGNsYXNzPVwibWFpbl9fbW92aWVzLW1vdmllLWNhdGVnb3J5LWljb25cIj48aW1nIHNyYz1cIiR7Y2F0ZWdvcnlNb3ZpZUltYWdlfVwiIGFsdD1cIk1vdmllIGNhdGVnb3J5XCI+IDwvc3Bhbj48c3BhbiBjbGFzcz1cIm1haW5fX21vdmllcy1tb3ZpZS1jYXRlZ29yeS1uYW1lXCI+JHttb3ZpZVsnY2F0ZWdvcnknXX08L3NwYW4+IMK3IDxzcGFuIGNsYXNzPVwibWFpbl9fbW92aWVzLW1vdmllLXJhdGluZ1wiPiR7bW92aWVbJ3JhdGluZyddfTwvc3Bhbj48L3A+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIm1haW5fX21vdmllcy1tb3ZpZS1pbmZvLWJvdHRvbVwiPjxzcGFuIGNsYXNzPVwibWFpbl9fbW92aWVzLW1vdmllLXRpdGxlXCI+JHttb3ZpZVsndGl0bGUnXX08L3NwYW4+PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1haW5fX21vdmllcy1tb3ZpZXMtcGxheS1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiZGlzdC9pbWcvYXNzZXRzL2ljb24tcGxheS5zdmdcIiBjbGFzcz1cIm1haW5fX21vdmllcy1tb3ZpZXMtaWNvblwiIGFsdD1cIlBsYXlcIj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwibWFpbl9fbW92aWVzLW1vdmllcy10ZXh0XCI+UGxheTwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYFxyXG4gICAgICAgICAgICBpZihjYXRlZ29yeU1vdmllID09ICdNb3ZpZScpIHtcclxuICAgICAgICAgICAgICAgIG1vdmllc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjYXJkKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblx0XHRcclxuXHR9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZWFyY2hJbnB1dFF1ZXJ5KG1vdmllcykge1xyXG5cdHNlYXJjaElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZSA9PiB7XHJcblx0XHRjb25zdCBxdWVyeSA9IGUudGFyZ2V0LnZhbHVlLnRyaW0oKVxyXG5cdFx0aWYgKHF1ZXJ5ICE9PSAnJykge1xyXG5cdFx0XHRmb3VuZC5jbGFzc0xpc3QucmVtb3ZlKCdub3QtYWN0aXZlJylcclxuXHRcdFx0bW92aWVzUGFyZW50LmNsYXNzTGlzdC5hZGQoJ25vdC1hY3RpdmUnKVxyXG5cdFx0XHRzZWFyY2hJbnB1dE1vdmllcyhxdWVyeSwgbW92aWVzKVxyXG5cdFx0fSBlbHNlIGlmIChxdWVyeSA9PSAnJykge1xyXG5cdFx0XHRmb3VuZC5jbGFzc0xpc3QuYWRkKCdub3QtYWN0aXZlJylcclxuXHRcdFx0bW92aWVzUGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ25vdC1hY3RpdmUnKVxyXG5cdFx0fVxyXG5cdH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlYXJjaElucHV0TW92aWVzKHF1ZXJ5LCBtb3ZpZXMpIHtcclxuXHRsZXQgc2VhcmNoTW92aWVzID0gMFxyXG5cdGZvdW5kTW92aWVzLmlubmVySFRNTCA9ICcnXHJcblx0Zm91bmRUaXRsZU5hbWUudGV4dENvbnRlbnQgPSBxdWVyeVxyXG5cclxuXHRtb3ZpZXMuZm9yRWFjaChtb3ZpZSA9PiB7XHJcblx0XHRpZiAobW92aWVbJ3RpdGxlJ10udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKSkge1xyXG5cdFx0XHRzZWFyY2hNb3ZpZXMrK1xyXG5cdFx0XHRjb25zdCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuXHRcdFx0Y2FyZC5jbGFzc0xpc3QuYWRkKCdtYWluX19mb3VuZC1tb3ZpZScpXHJcblxyXG5cdFx0XHRsZXQgY2F0ZWdvcnlNb3ZpZSA9IG1vdmllWydjYXRlZ29yeSddXHJcblx0XHRcdGxldCBjYXRlZ29yeU1vdmllSW1hZ2UgPSAnJ1xyXG5cclxuXHRcdFx0aWYgKGNhdGVnb3J5TW92aWUgPT0gJ01vdmllJykge1xyXG5cdFx0XHRcdGNhdGVnb3J5TW92aWVJbWFnZSA9ICdkaXN0L2ltZy9hc3NldHMvaWNvbi1jYXRlZ29yeS1tb3ZpZS5zdmcnXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2F0ZWdvcnlNb3ZpZUltYWdlID0gJ2Rpc3QvaW1nL2Fzc2V0cy9pY29uLWNhdGVnb3J5LXR2LnN2ZydcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y2FyZC5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFpbl9fZm91bmQtbW92aWUtcGhvdG8tY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke21vdmllWyd0aHVtYm5haWwnXVsncmVndWxhciddWydzbWFsbCddfVwiIGNsYXNzPVwibWFpbl9fZm91bmQtbW92aWUtcGhvdG9cIiBhbHQ9XCJmb3VuZCBtb3ZpZVwiPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1haW5fX2ZvdW5kLW1vdmllLWJvb2ttYXJrLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiZGlzdC9pbWcvYXNzZXRzL2ljb24tYm9va21hcmstZW1wdHkuc3ZnXCIgY2xhc3M9XCJtYWluX19mb3VuZC1tb3ZpZS1ib29rbWFya1wiPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFpbl9fZm91bmQtbW92aWUtaW5mby1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIm1haW5fX2ZvdW5kLW1vdmllLWluZm8tdG9wXCI+PHNwYW4gY2xhc3M9XCJtYWluX19mb3VuZC1tb3ZpZS15ZWFyXCI+JHttb3ZpZVsneWVhciddfTwvc3Bhbj4gwrcgPHNwYW4gY2xhc3M9XCJtYWluX19mb3VuZC1tb3ZpZS1jYXRlZ29yeS1pY29uXCI+PGltZyBzcmM9XCIke2NhdGVnb3J5TW92aWVJbWFnZX1cIiBhbHQ9XCJNb3ZpZSBjYXRlZ29yeVwiPiA8L3NwYW4+PHNwYW4gY2xhc3M9XCJtYWluX19mb3VuZC1tb3ZpZS1jYXRlZ29yeS1uYW1lXCI+JHttb3ZpZVsnY2F0ZWdvcnknXX08L3NwYW4+IMK3IDxzcGFuIGNsYXNzPVwibWFpbl9fZm91bmQtbW92aWUtcmF0aW5nXCI+JHttb3ZpZVsncmF0aW5nJ119PC9zcGFuPjwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cIm1haW5fX2ZvdW5kLW1vdmllLWluZm8tYm90dG9tXCI+PHNwYW4gY2xhc3M9XCJtYWluX19mb3VuZC1tb3ZpZS10aXRsZVwiPiR7bW92aWVbJ3RpdGxlJ119PC9zcGFuPjwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1haW5fX2ZvdW5kLW1vdmllcy1wbGF5LWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiZGlzdC9pbWcvYXNzZXRzL2ljb24tcGxheS5zdmdcIiBjbGFzcz1cIm1haW5fX2ZvdW5kLW1vdmllcy1pY29uXCIgYWx0PVwiUGxheVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwibWFpbl9fZm91bmQtbW92aWVzLXRleHRcIj5QbGF5PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICBgXHJcblxyXG4gICAgICAgICAgICAgICAgaWYoY2F0ZWdvcnlNb3ZpZSA9PSAnTW92aWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmRNb3ZpZXMuYXBwZW5kQ2hpbGQoY2FyZClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5cdGZvdW5kVGl0bGVQaWVjZXMudGV4dENvbnRlbnQgPSBzZWFyY2hNb3ZpZXNcclxuXHRpZiAoZm91bmRUaXRsZVBpZWNlcy50ZXh0Q29udGVudCA8PSAxKSB7XHJcblx0XHRmb3VuZFRpdGxlUGx1cmFsaXR5LnRleHRDb250ZW50ID0gJ3Jlc3VsdCdcclxuXHR9IGVsc2Uge1xyXG5cdFx0Zm91bmRUaXRsZVBsdXJhbGl0eS50ZXh0Q29udGVudCA9ICdyZXN1bHRzJ1xyXG5cdH1cclxufVxyXG4iXX0=
